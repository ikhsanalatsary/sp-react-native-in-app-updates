{"version":3,"sources":["InAppUpdates.ios.ts"],"names":["noop","InAppUpdates","InAppUpdatesBase","checkNeedsUpdate","checkOptions","curVersion","toSemverConverter","customVersionComparator","country","appVersion","debugLog","Siren","performCheck","then","checkResponse","JSON","stringify","version","newAppV","throwError","vCompRes","shouldUpdate","storeVersion","other","reason","catch","err","startUpdate","updateOptions","Promise","resolve","promptUser"],"mappings":"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","sourcesContent":["// @ts-expect-error\nimport Siren from 'react-native-siren';\n\nimport { compareVersions } from './utils';\nimport InAppUpdatesBase from './InAppUpdatesBase';\nimport type {\n  CheckOptions,\n  IosPerformCheckResponse,\n  IosStartUpdateOptions,\n  IosNeedsUpdateResponse,\n} from './types';\nimport { getVersion } from 'react-native-device-info';\n\nconst noop = () => {};\n\nexport default class InAppUpdates extends InAppUpdatesBase {\n  public checkNeedsUpdate(\n    checkOptions?: CheckOptions\n  ): Promise<IosNeedsUpdateResponse> {\n    const { curVersion, toSemverConverter, customVersionComparator, country } =\n      checkOptions || {};\n\n    let appVersion: string;\n    if (curVersion) {\n      appVersion = curVersion;\n    } else {\n      appVersion = getVersion();\n    }\n    this.debugLog('Checking store version (iOS)');\n    return Siren.performCheck({ country })\n      .then((checkResponse: IosPerformCheckResponse) => {\n        this.debugLog(\n          `Received response from app store: ${JSON.stringify(checkResponse)}`\n        );\n        const { version } = checkResponse || {};\n\n        if (version != null) {\n          let newAppV = `${version}`;\n          if (toSemverConverter) {\n            newAppV = toSemverConverter(version);\n            this.debugLog(\n              `Used custom semver, and converted result from store (${version}) to ${newAppV}`\n            );\n            if (!newAppV) {\n              this.throwError(\n                `Couldnt convert ${version} using your custom semver converter`,\n                'checkNeedsUpdate'\n              );\n            }\n          }\n          const vCompRes = customVersionComparator\n            ? customVersionComparator(newAppV, appVersion)\n            : compareVersions(newAppV, appVersion);\n\n          if (vCompRes > 0) {\n            this.debugLog(\n              `Compared cur version (${curVersion}) with store version (${newAppV}). The store version is higher!`\n            );\n            // app store version is higher than the current version\n            return {\n              shouldUpdate: true,\n              storeVersion: newAppV,\n              other: { ...checkResponse },\n            };\n          }\n          this.debugLog(\n            `Compared cur version (${curVersion}) with store version (${newAppV}). The current version is higher!`\n          );\n          return {\n            shouldUpdate: false,\n            storeVersion: newAppV,\n            reason: `current version (${curVersion}) is already later than the latest store version (${newAppV}${\n              toSemverConverter ? ` - originated from ${version}` : ''\n            })`,\n            other: { ...checkResponse },\n          };\n        }\n        this.debugLog('Failed to fetch a store version');\n        return {\n          shouldUpdate: false,\n          reason: 'Couldn\\t fetch the latest version',\n          other: { ...checkResponse },\n        };\n      })\n      .catch((err: any) => {\n        this.debugLog(err);\n        this.throwError(err, 'checkNeedsUpdate');\n      });\n  }\n\n  startUpdate(updateOptions: IosStartUpdateOptions): Promise<void> {\n    return Promise.resolve(Siren.promptUser(updateOptions));\n  }\n\n  installUpdate = noop;\n  addStatusUpdateListener = noop;\n  removeStatusUpdateListener = noop;\n  addIntentSelectionListener = noop;\n  removeIntentSelectionListener = noop;\n}\n"]}