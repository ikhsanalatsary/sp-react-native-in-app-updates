{"version":3,"sources":["types.ts"],"names":["AndroidInstallStatus","AndroidOther","AndroidAvailabilityStatus","AndroidUpdateType"],"mappings":";;;;;;IAAYA,oB;;;WAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;AAAAA,EAAAA,oB,CAAAA,oB;GAAAA,oB,oCAAAA,oB;;IA4DAC,Y;;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,4BAAAA,Y;;IAKAC,yB;;;WAAAA,yB;AAAAA,EAAAA,yB,CAAAA,yB;AAAAA,EAAAA,yB,CAAAA,yB;AAAAA,EAAAA,yB,CAAAA,yB;AAAAA,EAAAA,yB,CAAAA,yB;GAAAA,yB,yCAAAA,yB;;IAOAC,iB;;;WAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;GAAAA,iB,iCAAAA,iB","sourcesContent":["export enum AndroidInstallStatus {\n  UNKNOWN = 0,\n  PENDING = 1,\n  DOWNLOADING = 2,\n  INSTALLING = 3,\n  INSTALLED = 4,\n  FAILED = 5,\n  CANCELED = 6,\n  DOWNLOADED = 11,\n}\n\nexport type InstallationResult =\n  | AndroidInstallStatus.INSTALLED\n  | AndroidInstallStatus.CANCELED;\n\nexport type StatusUpdateEvent = {\n  bytesDownloaded: any;\n  totalBytesToDownload: any;\n  status: AndroidInstallStatus;\n};\n\n/**\n * Whether the iOS APNs message was configured as a background update notification.\n */\nexport type CheckOptions = {\n  /**\n   * The semver of your current app version\n   */\n  curVersion?: string;\n\n  /**\n   * This will run right after the store version is fetched in case you want to change it before it's compared as a semver\n   */\n  toSemverConverter?: (\n    version: SemverVersionCode | SemverVersion\n  ) => SemverVersion;\n\n  /**\n   * By default this library uses semver behind the scenes to compare the store version with the curVersion value, but you can pass your own version comparator if you want to\n   */\n  customVersionComparator?: (\n    v1: SemverVersion,\n    v2: SemverVersion\n  ) => -1 | 0 | 1;\n\n  /**\n   * ISO 3166-1 country code (iOS only)\n   */\n  country?: string;\n};\n\nexport type SemverVersion = string;\nexport type SemverVersionCode = number;\n\nexport interface NeedsUpdateResponseBase {\n  shouldUpdate: boolean;\n  storeVersion: SemverVersion;\n  reason: string;\n}\n\nexport enum AndroidOther {\n  IN_APP_UPDATE_RESULT_KEY = 'in_app_update_result',\n  IN_APP_UPDATE_STATUS_KEY = 'in_app_update_status',\n}\n\nexport enum AndroidAvailabilityStatus {\n  UNKNOWN = 0,\n  AVAILABLE = 2,\n  UNAVAILABLE = 1,\n  DEVELOPER_TRIGGERED = 3,\n}\n\nexport enum AndroidUpdateType {\n  FLEXIBLE = 0,\n  IMMEDIATE = 1,\n}\n\nexport type AndroidInAppUpdateExtras = {\n  updateAvailability: AndroidAvailabilityStatus;\n  versionCode: SemverVersionCode;\n  isFlexibleUpdateAllowed: boolean;\n  isImmediateUpdateAllowed: boolean;\n  packageName: string;\n  totalBytes: number;\n  updatePriority: number;\n};\n\nexport interface AndroidNeedsUpdateResponse extends NeedsUpdateResponseBase {\n  other: AndroidInAppUpdateExtras;\n}\n// export interface NeedsUpdateResponse\n\nexport type AndroidStatusEventListener = (status: StatusUpdateEvent) => void;\nexport type AndroidIntentResultListener = (\n  intentResult: InstallationResult\n) => void;\n\nexport type AndroidStartUpdateOptions = {\n  updateType: AndroidUpdateType;\n};\n\nexport type IosITunesResponse = {\n  screenshotUrls: string[];\n  ipadScreenshotUrls: string[];\n  appletvScreenshotUrls: string[];\n  artworkUrl60: string;\n  artworkUrl512: string;\n  artworkUrl100: string;\n  artistViewUrl: string;\n  supportedDevices: string[];\n  advisories: string[];\n  isGameCenterEnabled: string[];\n  features: string[];\n  kind: string;\n  trackCensoredName: string;\n  languageCodesISO2A: string[];\n  fileSizeBytes: string;\n  contentAdvisoryRating: string;\n  averageUserRatingForCurrentVersion: number;\n  userRatingCountForCurrentVersion: number;\n  averageUserRating: number;\n  trackViewUrl: string;\n  trackContentRating: string;\n  isVppDeviceBasedLicensingEnabled: boolean;\n  trackId: number;\n  trackName: string;\n  releaseDate: string;\n  genreIds: string[];\n  formattedPrice: string;\n  primaryGenreName: string;\n  minimumOsVersion: string;\n  currentVersionReleaseDate: string;\n  releaseNotes: string;\n  primaryGenreId: number;\n  sellerName: string;\n  currency: string;\n  description: string;\n  artistId: number;\n  artistName: string;\n  genres: string[];\n  price: number;\n  bundleId: string;\n  version: string;\n  wrapperType: string;\n  userRatingCount: number;\n};\n\nexport interface IosPerformCheckResponse extends IosITunesResponse {\n  updateIsAvailable: boolean;\n}\n\nexport interface IosNeedsUpdateResponse extends NeedsUpdateResponseBase {\n  other: IosPerformCheckResponse;\n}\nexport type NeedsUpdateResponse =\n  | IosNeedsUpdateResponse\n  | AndroidNeedsUpdateResponse;\n\nexport type IosStartUpdateOptions = {\n  title?: string;\n  message?: string;\n  buttonUpgradeText?: string;\n  buttonCancelText?: string;\n  forceUpgrade?: boolean;\n  updateType?: never;\n};\n\nexport type StartUpdateOptions =\n  | IosStartUpdateOptions\n  | AndroidStartUpdateOptions;\n"]}